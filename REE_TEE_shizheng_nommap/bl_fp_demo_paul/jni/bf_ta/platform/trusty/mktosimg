#!/usr/bin/env python
# Copyright (C) 2016-2017, Spreadtrum Communications Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


from argparse import ArgumentParser, FileType, Action
from struct import pack, unpack

APP_TAG_MAGIC = 'TAG:PREBUILT.TRUSTY.APPS'
# Magic code + tos base address(4B) + tos end address(4B)
APP_TAG_LEN = 0x28; 

def parse_int(x):
    return int(x, 0)

def pad_file(f, padding):
    pad = (padding - (f.tell() & (padding - 1))) & (padding - 1)
    f.write(pack(str(pad) + 'x'))

def parse_cmdline():
    parser = ArgumentParser()
    parser.add_argument('--tos', help='path to the tos binary', required=True)
    parser.add_argument('--ta', help='path to the TA(elf)', type=FileType('rb'),
                        required=True)
    parser.add_argument('--padsize', help='page size', type=parse_int, default=4096)
    parser.add_argument('-o', '--output', help='output file name', required=True)
    return parser.parse_args()

def update_img(args):
    f_tos = open(args.tos, 'rb')
    tos_img = f_tos.read()
    f_tos.close()

    ta_img = args.ta.read()

    tag_offset = tos_img.rfind(APP_TAG_MAGIC)
    magic_end = tag_offset + APP_TAG_LEN - 8;

    print("len(tos_img)=%x,tag_offset=%x,args.padsize=%x\n" % (len(tos_img),tag_offset,args.padsize))
    if len(tos_img) != tag_offset + args.padsize:
        raise ValueError('The location of magic code does not match this image')

    # Parse tos base address and app end address
    base, end = unpack('2I',tos_img[magic_end:magic_end+8])
    if end - base + args.padsize + len(ta_img) > len(tos_img):
        raise ValueError('TA image size is too large')

    print("tag offset: 0x%x\ntos ram base: 0x%x\ntos end offset: 0x%x"
           % (tag_offset, base, end))

    # Write the orginal tos image data except padding
    f_out = open(args.output, 'wb')
    f_out.write(tos_img[:(end - base)])

    # Write TA elf
    f_out.write(ta_img)

    # Write magic code with padding
    f_out.seek(tag_offset)
    f_out.write(pack("32s", APP_TAG_MAGIC))
    f_out.write(pack("2I", base, end + len(ta_img)))
    print("update app end: 0x%x" % (end + len(ta_img)))

    pad_file(f_out, args.padsize)

    f_out.close();

def main():
    args = parse_cmdline()
    update_img(args)

if __name__ == '__main__':
    main()
